package com.squashtrainingapp

import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import com.facebook.react.PackageList
import com.facebook.react.ReactApplication
import com.facebook.react.ReactHost
import com.facebook.react.ReactNativeApplicationEntryPoint.loadReactNative
import com.facebook.react.ReactNativeHost
import com.facebook.react.ReactPackage
import com.facebook.react.defaults.DefaultReactHost.getDefaultReactHost
import com.facebook.react.defaults.DefaultReactNativeHost

// 안정적인 네이티브 모듈 패키지만 import
import com.oblador.vectoricons.VectorIconsPackage
import org.pgsqlite.SQLitePluginPackage

class MainApplication : Application(), ReactApplication {

  override val reactNativeHost: ReactNativeHost =
      object : DefaultReactNativeHost(this) {
        override fun getPackages(): List<ReactPackage> =
            PackageList(this).packages.apply {
              // 안정적인 네이티브 모듈만 추가
              add(VectorIconsPackage())
              add(SQLitePluginPackage())
            }

        override fun getJSMainModuleName(): String = "index"

        override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG

        override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
        override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED
      }

  override val reactHost: ReactHost
    get() = getDefaultReactHost(applicationContext, reactNativeHost)

  override fun onCreate() {
    super.onCreate()
    loadReactNative(this)
    createNotificationChannels()
  }

  private fun createNotificationChannels() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
      
      // Workout reminder channel
      val workoutChannel = NotificationChannel(
        "workout-reminder",
        "운동 알림",
        NotificationManager.IMPORTANCE_HIGH
      ).apply {
        description = "일일 운동 알림"
        enableVibration(true)
      }
      notificationManager.createNotificationChannel(workoutChannel)
      
      // Missed workout channel
      val missedChannel = NotificationChannel(
        "missed-workout",
        "운동 미수행 알림",
        NotificationManager.IMPORTANCE_HIGH
      ).apply {
        description = "운동을 놓쳤을 때 알림"
        enableVibration(true)
      }
      notificationManager.createNotificationChannel(missedChannel)
      
      // Weekly report channel
      val weeklyChannel = NotificationChannel(
        "weekly-report",
        "주간 리포트",
        NotificationManager.IMPORTANCE_DEFAULT
      ).apply {
        description = "주간 운동 요약 리포트"
        enableVibration(true)
      }
      notificationManager.createNotificationChannel(weeklyChannel)
    }
  }
}
